// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RotaryClubManager.Infrastructure.Data;

#nullable disable

namespace RotaryClubManager.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250619232002_UpdateClubEntity")]
    partial class UpdateClubEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.Categorie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Libelle")
                        .IsUnique()
                        .HasDatabaseName("IX_Categorie_Libelle_Unique");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.CategoryBudget", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("TypeBudgetId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Libelle");

                    b.HasIndex("TypeBudgetId");

                    b.HasIndex("TypeBudgetId", "Libelle")
                        .IsUnique()
                        .HasDatabaseName("IX_CategoryBudget_TypeBudgetId_Libelle_Unique");

                    b.ToTable("CategoriesBudget");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.Club", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Adresse")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("DateCreation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Frequence")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<TimeSpan>("HeureReunion")
                        .HasColumnType("interval");

                    b.Property<string>("JourReunion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("LieuReunion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NumeroClub")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("NumeroTelephone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("ParrainePar")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NumeroClub")
                        .IsUnique();

                    b.ToTable("Clubs");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.Comite", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClubId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MandatId")
                        .HasColumnType("uuid");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.HasIndex("MandatId");

                    b.HasIndex("Nom");

                    b.HasIndex("ClubId", "MandatId");

                    b.HasIndex("ClubId", "MandatId", "Nom")
                        .IsUnique()
                        .HasDatabaseName("IX_Comite_ClubId_MandatId_Nom_Unique");

                    b.ToTable("Comites");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.ComiteMembre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FonctionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MandatId")
                        .HasColumnType("uuid");

                    b.Property<string>("MembreId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FonctionId");

                    b.HasIndex("MembreId");

                    b.HasIndex("MandatId", "MembreId", "FonctionId")
                        .IsUnique();

                    b.ToTable("ComiteMembres");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.Commission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClubId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.HasIndex("Nom");

                    b.HasIndex("ClubId", "Nom")
                        .IsUnique()
                        .HasDatabaseName("IX_Commission_ClubId_Nom_Unique");

                    b.ToTable("Commissions");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.Cotisation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("MandatId")
                        .HasColumnType("uuid");

                    b.Property<string>("MembreId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Montant")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MandatId");

                    b.HasIndex("MembreId");

                    b.HasIndex("Montant");

                    b.HasIndex("MembreId", "MandatId")
                        .IsUnique();

                    b.ToTable("Cotisations");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategorieId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClubId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<byte[]>("Fichier")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("TypeDocumentId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CategorieId");

                    b.HasIndex("ClubId");

                    b.HasIndex("Nom");

                    b.HasIndex("TypeDocumentId");

                    b.HasIndex("ClubId", "CategorieId");

                    b.HasIndex("ClubId", "TypeDocumentId");

                    b.HasIndex("ClubId", "CategorieId", "TypeDocumentId");

                    b.HasIndex("ClubId", "CategorieId", "TypeDocumentId", "Nom")
                        .IsUnique()
                        .HasDatabaseName("IX_Document_ClubId_CategorieId_TypeDocumentId_Nom_Unique");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.Evenement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClubId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<bool>("EstInterne")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Lieu")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.HasIndex("Date");

                    b.HasIndex("EstInterne");

                    b.HasIndex("Libelle");

                    b.HasIndex("ClubId", "Date");

                    b.HasIndex("ClubId", "EstInterne");

                    b.HasIndex("Date", "EstInterne");

                    b.HasIndex("ClubId", "Date", "EstInterne");

                    b.HasIndex("ClubId", "Libelle", "Date")
                        .IsUnique()
                        .HasDatabaseName("IX_Evenement_ClubId_Libelle_Date_Unique");

                    b.ToTable("Evenements");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.EvenementBudget", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EvenementId")
                        .HasColumnType("uuid");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<decimal>("MontantBudget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("MontantRealise")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("EvenementId");

                    b.HasIndex("Libelle");

                    b.HasIndex("MontantBudget");

                    b.HasIndex("EvenementId", "Libelle")
                        .IsUnique()
                        .HasDatabaseName("IX_EvenementBudget_EvenementId_Libelle_Unique");

                    b.ToTable("EvenementBudgets");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.EvenementDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateAjout")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<byte[]>("Document")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<Guid>("EvenementId")
                        .HasColumnType("uuid");

                    b.Property<string>("Libelle")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("DateAjout");

                    b.HasIndex("EvenementId");

                    b.HasIndex("Libelle");

                    b.HasIndex("EvenementId", "Libelle")
                        .IsUnique()
                        .HasDatabaseName("IX_EvenementDocument_EvenementId_Libelle_Unique");

                    b.ToTable("EvenementDocuments");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.EvenementImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateAjout")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("EvenementId")
                        .HasColumnType("uuid");

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.HasIndex("DateAjout");

                    b.HasIndex("Description");

                    b.HasIndex("EvenementId");

                    b.ToTable("EvenementImages");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.EvenementRecette", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("EvenementId")
                        .HasColumnType("uuid");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<decimal>("Montant")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("EvenementId");

                    b.HasIndex("Libelle");

                    b.HasIndex("Montant");

                    b.ToTable("EvenementRecettes");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.Fonction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("NomFonction")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("NomFonction")
                        .IsUnique();

                    b.ToTable("Fonctions");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.FonctionEcheances", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateButoir")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FonctionId")
                        .HasColumnType("uuid");

                    b.Property<int>("Frequence")
                        .HasColumnType("integer");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("DateButoir");

                    b.HasIndex("FonctionId");

                    b.HasIndex("Frequence");

                    b.HasIndex("Libelle");

                    b.HasIndex("DateButoir", "Frequence");

                    b.HasIndex("FonctionId", "DateButoir");

                    b.HasIndex("FonctionId", "Frequence");

                    b.HasIndex("FonctionId", "Libelle")
                        .IsUnique()
                        .HasDatabaseName("IX_FonctionEcheances_FonctionId_Libelle_Unique");

                    b.ToTable("FonctionEcheances");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.FonctionRolesResponsabilites", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid>("FonctionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("FonctionId");

                    b.HasIndex("Libelle");

                    b.HasIndex("FonctionId", "Libelle")
                        .IsUnique()
                        .HasDatabaseName("IX_FonctionRolesResponsabilites_FonctionId_Libelle_Unique");

                    b.ToTable("FonctionRolesResponsabilites");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.Gala", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Lieu")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NombreSouchesTickets")
                        .HasColumnType("integer");

                    b.Property<int>("NombreSouchesTombola")
                        .HasColumnType("integer");

                    b.Property<int>("NombreTables")
                        .HasColumnType("integer");

                    b.Property<int>("QuantiteParSoucheTickets")
                        .HasColumnType("integer");

                    b.Property<int>("QuantiteParSoucheTombola")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Galas");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.GalaInvites", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GalaId")
                        .HasColumnType("uuid");

                    b.Property<string>("Nom_Prenom")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GalaId");

                    b.ToTable("GalaInvites");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.GalaTable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GalaId")
                        .HasColumnType("uuid");

                    b.Property<string>("TableLibelle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GalaId");

                    b.ToTable("GalaTables");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.GalaTableAffectation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateAjout")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("GalaInvitesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("GalaTableId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DateAjout")
                        .HasDatabaseName("IX_GalaTableAffectation_DateAjout");

                    b.HasIndex("GalaInvitesId")
                        .HasDatabaseName("IX_GalaTableAffectation_GalaInvitesId");

                    b.HasIndex("GalaTableId")
                        .HasDatabaseName("IX_GalaTableAffectation_GalaTableId");

                    b.HasIndex("DateAjout", "GalaTableId")
                        .HasDatabaseName("IX_GalaTableAffectation_DateAjout_GalaTableId");

                    b.HasIndex("GalaTableId", "GalaInvitesId")
                        .IsUnique()
                        .HasDatabaseName("IX_GalaTableAffectation_GalaTableId_GalaInvitesId_Unique");

                    b.ToTable("GalaTableAffectations");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.GalaTicket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Externe")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<Guid>("GalaId")
                        .HasColumnType("uuid");

                    b.Property<string>("MembreId")
                        .HasColumnType("text");

                    b.Property<int>("Quantite")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Externe");

                    b.HasIndex("GalaId");

                    b.HasIndex("MembreId");

                    b.HasIndex("Quantite");

                    b.HasIndex("GalaId", "MembreId")
                        .IsUnique()
                        .HasDatabaseName("IX_GalaTicket_GalaId_MembreId_Unique")
                        .HasFilter("\"MembreId\" IS NOT NULL");

                    b.ToTable("GalaTickets", t =>
                        {
                            t.HasCheckConstraint("CK_GalaTicket_MembreOrExterne", "(\"MembreId\" IS NOT NULL) OR (\"Externe\" IS NOT NULL AND \"Externe\" != '')");
                        });
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.GalaTombola", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Externe")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<Guid>("GalaId")
                        .HasColumnType("uuid");

                    b.Property<string>("MembreId")
                        .HasColumnType("text");

                    b.Property<int>("Quantite")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Externe");

                    b.HasIndex("GalaId");

                    b.HasIndex("MembreId");

                    b.HasIndex("Quantite");

                    b.HasIndex("GalaId", "MembreId")
                        .IsUnique()
                        .HasDatabaseName("IX_GalaTombola_GalaId_MembreId_Unique")
                        .HasFilter("\"MembreId\" IS NOT NULL");

                    b.ToTable("GalaTombolas", t =>
                        {
                            t.HasCheckConstraint("CK_GalaTombola_MembreOrExterne", "(\"MembreId\" IS NOT NULL) OR (\"Externe\" IS NOT NULL AND \"Externe\" != '')");
                        });
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.InviteReunion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Organisation")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("ReunionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Telephone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("Email");

                    b.HasIndex("ReunionId");

                    b.HasIndex("Nom", "Prenom");

                    b.ToTable("InvitesReunion");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.ListePresence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("MembreId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ReunionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MembreId");

                    b.HasIndex("ReunionId");

                    b.HasIndex("MembreId", "ReunionId")
                        .IsUnique();

                    b.ToTable("ListesPresence");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.Mandat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Annee")
                        .HasColumnType("integer");

                    b.Property<Guid>("ClubId")
                        .HasColumnType("uuid");

                    b.Property<string>("Comite")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("DateDebut")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateFin")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("EstActuel")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ClubId", "Annee")
                        .IsUnique();

                    b.HasIndex("ClubId", "EstActuel")
                        .IsUnique()
                        .HasFilter("EstActuel = 1");

                    b.ToTable("Mandats");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.MembreCommission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Commentaires")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("CommissionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DateDemission")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateNomination")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("EstActif")
                        .HasColumnType("boolean");

                    b.Property<bool>("EstResponsable")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MandatId")
                        .HasColumnType("uuid");

                    b.Property<string>("MembreId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CommissionId");

                    b.HasIndex("MandatId");

                    b.HasIndex("MembreId");

                    b.HasIndex("CommissionId", "MembreId", "MandatId")
                        .IsUnique()
                        .HasDatabaseName("IX_MembreCommission_Commission_Membre_Mandat_Unique");

                    b.ToTable("MembresCommission");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.OrdreDuJour", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid>("ReunionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ReunionId");

                    b.ToTable("OrdresDuJour");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.OrdreJourRapport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Divers")
                        .HasColumnType("text");

                    b.Property<Guid>("OrdreDuJourId")
                        .HasColumnType("uuid");

                    b.Property<string>("Texte")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OrdreDuJourId");

                    b.HasIndex("OrdreDuJourId", "Texte");

                    b.ToTable("OrdreJourRapports");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.PaiementCotisation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClubId")
                        .HasColumnType("uuid");

                    b.Property<string>("Commentaires")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp");

                    b.Property<string>("MembreId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Montant")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.HasIndex("Date");

                    b.HasIndex("MembreId");

                    b.HasIndex("Montant");

                    b.HasIndex("MembreId", "Date");

                    b.ToTable("PaiementCotisations");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.Reunion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClubId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<TimeSpan>("Heure")
                        .HasColumnType("time");

                    b.Property<Guid>("TypeReunionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.HasIndex("TypeReunionId");

                    b.HasIndex("ClubId", "Date");

                    b.HasIndex("ClubId", "TypeReunionId");

                    b.HasIndex("Date", "Heure");

                    b.HasIndex("ClubId", "Date", "Heure");

                    b.HasIndex("ClubId", "Date", "Heure", "TypeReunionId")
                        .IsUnique()
                        .HasDatabaseName("IX_Reunion_ClubId_Date_Heure_TypeReunion_Unique");

                    b.ToTable("Reunions");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.ReunionDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte[]>("Document")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("ReunionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Libelle");

                    b.HasIndex("ReunionId");

                    b.HasIndex("ReunionId", "Libelle")
                        .IsUnique()
                        .HasDatabaseName("IX_ReunionDocument_ReunionId_Libelle_Unique");

                    b.ToTable("ReunionDocuments");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.RubriqueBudget", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClubId")
                        .HasColumnType("uuid");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("MandatId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("PrixUnitaire")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantite")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<Guid>("SousCategoryBudgetId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.HasIndex("Libelle");

                    b.HasIndex("MandatId");

                    b.HasIndex("PrixUnitaire");

                    b.HasIndex("SousCategoryBudgetId");

                    b.HasIndex("ClubId", "MandatId");

                    b.HasIndex("ClubId", "SousCategoryBudgetId");

                    b.HasIndex("ClubId", "MandatId", "SousCategoryBudgetId");

                    b.HasIndex("ClubId", "MandatId", "SousCategoryBudgetId", "Libelle")
                        .IsUnique()
                        .HasDatabaseName("IX_RubriqueBudget_ClubId_MandatId_SousCategoryBudgetId_Libelle_Unique");

                    b.ToTable("RubriquesBudget");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.RubriqueBudgetRealise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Commentaires")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Montant")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("RubriqueBudgetId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Date");

                    b.HasIndex("Montant");

                    b.HasIndex("RubriqueBudgetId");

                    b.HasIndex("RubriqueBudgetId", "Date");

                    b.HasIndex("RubriqueBudgetId", "Date", "Montant");

                    b.ToTable("RubriquesBudgetRealisees");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.SousCategoryBudget", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryBudgetId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClubId")
                        .HasColumnType("uuid");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryBudgetId");

                    b.HasIndex("ClubId");

                    b.HasIndex("Libelle");

                    b.HasIndex("ClubId", "CategoryBudgetId");

                    b.HasIndex("ClubId", "CategoryBudgetId", "Libelle")
                        .IsUnique()
                        .HasDatabaseName("IX_SousCategoryBudget_ClubId_CategoryBudgetId_Libelle_Unique");

                    b.ToTable("SousCategoriesBudget");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.TypeBudget", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Libelle")
                        .IsUnique()
                        .HasDatabaseName("IX_TypeBudget_Libelle_Unique");

                    b.ToTable("TypesBudget");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.TypeDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Libelle")
                        .IsUnique()
                        .HasDatabaseName("IX_TypeDocument_Libelle_Unique");

                    b.ToTable("TypesDocument");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.TypeReunion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Libelle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Libelle")
                        .IsUnique();

                    b.ToTable("TypesReunion");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<Guid?>("ClubId")
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("JoinedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("ProfilePictureUrl")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Identity.UserClub", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClubId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("JoinedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.HasIndex("UserId");

                    b.ToTable("UserClubs");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RotaryClubManager.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RotaryClubManager.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RotaryClubManager.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RotaryClubManager.Domain.Identity.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.CategoryBudget", b =>
                {
                    b.HasOne("RotaryClubManager.Domain.Entities.TypeBudget", "TypeBudget")
                        .WithMany("CategoriesBudget")
                        .HasForeignKey("TypeBudgetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TypeBudget");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.Comite", b =>
                {
                    b.HasOne("RotaryClubManager.Domain.Entities.Club", "Club")
                        .WithMany()
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RotaryClubManager.Domain.Entities.Mandat", "Mandat")
                        .WithMany()
                        .HasForeignKey("MandatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");

                    b.Navigation("Mandat");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.ComiteMembre", b =>
                {
                    b.HasOne("RotaryClubManager.Domain.Entities.Fonction", "Fonction")
                        .WithMany()
                        .HasForeignKey("FonctionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RotaryClubManager.Domain.Entities.Mandat", "Mandat")
                        .WithMany()
                        .HasForeignKey("MandatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RotaryClubManager.Domain.Identity.ApplicationUser", "Membre")
                        .WithMany()
                        .HasForeignKey("MembreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Fonction");

                    b.Navigation("Mandat");

                    b.Navigation("Membre");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.Commission", b =>
                {
                    b.HasOne("RotaryClubManager.Domain.Entities.Club", "Club")
                        .WithMany()
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.Cotisation", b =>
                {
                    b.HasOne("RotaryClubManager.Domain.Entities.Mandat", "Mandat")
                        .WithMany()
                        .HasForeignKey("MandatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RotaryClubManager.Domain.Identity.ApplicationUser", "Membre")
                        .WithMany()
                        .HasForeignKey("MembreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Mandat");

                    b.Navigation("Membre");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.Document", b =>
                {
                    b.HasOne("RotaryClubManager.Domain.Entities.Categorie", "Categorie")
                        .WithMany("Documents")
                        .HasForeignKey("CategorieId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RotaryClubManager.Domain.Entities.Club", "Club")
                        .WithMany()
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RotaryClubManager.Domain.Entities.TypeDocument", "TypeDocument")
                        .WithMany("Documents")
                        .HasForeignKey("TypeDocumentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Categorie");

                    b.Navigation("Club");

                    b.Navigation("TypeDocument");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.Evenement", b =>
                {
                    b.HasOne("RotaryClubManager.Domain.Entities.Club", "Club")
                        .WithMany()
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.EvenementBudget", b =>
                {
                    b.HasOne("RotaryClubManager.Domain.Entities.Evenement", "Evenement")
                        .WithMany("Budgets")
                        .HasForeignKey("EvenementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evenement");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.EvenementDocument", b =>
                {
                    b.HasOne("RotaryClubManager.Domain.Entities.Evenement", "Evenement")
                        .WithMany("Documents")
                        .HasForeignKey("EvenementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evenement");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.EvenementImage", b =>
                {
                    b.HasOne("RotaryClubManager.Domain.Entities.Evenement", "Evenement")
                        .WithMany("Images")
                        .HasForeignKey("EvenementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evenement");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.EvenementRecette", b =>
                {
                    b.HasOne("RotaryClubManager.Domain.Entities.Evenement", "Evenement")
                        .WithMany("Recettes")
                        .HasForeignKey("EvenementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evenement");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.FonctionEcheances", b =>
                {
                    b.HasOne("RotaryClubManager.Domain.Entities.Fonction", "Fonction")
                        .WithMany()
                        .HasForeignKey("FonctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fonction");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.FonctionRolesResponsabilites", b =>
                {
                    b.HasOne("RotaryClubManager.Domain.Entities.Fonction", "Fonction")
                        .WithMany()
                        .HasForeignKey("FonctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Fonction");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.GalaInvites", b =>
                {
                    b.HasOne("RotaryClubManager.Domain.Entities.Gala", "Gala")
                        .WithMany("Invites")
                        .HasForeignKey("GalaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gala");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.GalaTable", b =>
                {
                    b.HasOne("RotaryClubManager.Domain.Entities.Gala", "Gala")
                        .WithMany("Tables")
                        .HasForeignKey("GalaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gala");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.GalaTableAffectation", b =>
                {
                    b.HasOne("RotaryClubManager.Domain.Entities.GalaInvites", "GalaInvites")
                        .WithMany("TableAffectations")
                        .HasForeignKey("GalaInvitesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RotaryClubManager.Domain.Entities.GalaTable", "GalaTable")
                        .WithMany("TableAffectations")
                        .HasForeignKey("GalaTableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GalaInvites");

                    b.Navigation("GalaTable");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.GalaTicket", b =>
                {
                    b.HasOne("RotaryClubManager.Domain.Entities.Gala", "Gala")
                        .WithMany("Tickets")
                        .HasForeignKey("GalaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RotaryClubManager.Domain.Identity.ApplicationUser", "Membre")
                        .WithMany()
                        .HasForeignKey("MembreId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Gala");

                    b.Navigation("Membre");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.GalaTombola", b =>
                {
                    b.HasOne("RotaryClubManager.Domain.Entities.Gala", "Gala")
                        .WithMany("Tombolas")
                        .HasForeignKey("GalaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RotaryClubManager.Domain.Identity.ApplicationUser", "Membre")
                        .WithMany()
                        .HasForeignKey("MembreId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Gala");

                    b.Navigation("Membre");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.InviteReunion", b =>
                {
                    b.HasOne("RotaryClubManager.Domain.Entities.Reunion", "Reunion")
                        .WithMany("Invites")
                        .HasForeignKey("ReunionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reunion");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.ListePresence", b =>
                {
                    b.HasOne("RotaryClubManager.Domain.Identity.ApplicationUser", "Membre")
                        .WithMany()
                        .HasForeignKey("MembreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RotaryClubManager.Domain.Entities.Reunion", "Reunion")
                        .WithMany("ListesPresence")
                        .HasForeignKey("ReunionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Membre");

                    b.Navigation("Reunion");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.Mandat", b =>
                {
                    b.HasOne("RotaryClubManager.Domain.Entities.Club", "Club")
                        .WithMany("Mandats")
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.MembreCommission", b =>
                {
                    b.HasOne("RotaryClubManager.Domain.Entities.Commission", "Commission")
                        .WithMany()
                        .HasForeignKey("CommissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RotaryClubManager.Domain.Entities.Mandat", "Mandat")
                        .WithMany("MembresCommission")
                        .HasForeignKey("MandatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RotaryClubManager.Domain.Identity.ApplicationUser", "Membre")
                        .WithMany()
                        .HasForeignKey("MembreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Commission");

                    b.Navigation("Mandat");

                    b.Navigation("Membre");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.OrdreDuJour", b =>
                {
                    b.HasOne("RotaryClubManager.Domain.Entities.Reunion", "Reunion")
                        .WithMany("OrdresDuJour")
                        .HasForeignKey("ReunionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reunion");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.OrdreJourRapport", b =>
                {
                    b.HasOne("RotaryClubManager.Domain.Entities.OrdreDuJour", "OrdreDuJour")
                        .WithMany()
                        .HasForeignKey("OrdreDuJourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrdreDuJour");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.PaiementCotisation", b =>
                {
                    b.HasOne("RotaryClubManager.Domain.Entities.Club", "Club")
                        .WithMany()
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RotaryClubManager.Domain.Identity.ApplicationUser", "Membre")
                        .WithMany()
                        .HasForeignKey("MembreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Club");

                    b.Navigation("Membre");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.Reunion", b =>
                {
                    b.HasOne("RotaryClubManager.Domain.Entities.Club", "Club")
                        .WithMany()
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RotaryClubManager.Domain.Entities.TypeReunion", "TypeReunion")
                        .WithMany("Reunions")
                        .HasForeignKey("TypeReunionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Club");

                    b.Navigation("TypeReunion");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.ReunionDocument", b =>
                {
                    b.HasOne("RotaryClubManager.Domain.Entities.Reunion", "Reunion")
                        .WithMany("Documents")
                        .HasForeignKey("ReunionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reunion");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.RubriqueBudget", b =>
                {
                    b.HasOne("RotaryClubManager.Domain.Entities.Club", "Club")
                        .WithMany()
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RotaryClubManager.Domain.Entities.Mandat", "Mandat")
                        .WithMany()
                        .HasForeignKey("MandatId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RotaryClubManager.Domain.Entities.SousCategoryBudget", "SousCategoryBudget")
                        .WithMany("Rubriques")
                        .HasForeignKey("SousCategoryBudgetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");

                    b.Navigation("Mandat");

                    b.Navigation("SousCategoryBudget");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.RubriqueBudgetRealise", b =>
                {
                    b.HasOne("RotaryClubManager.Domain.Entities.RubriqueBudget", "RubriqueBudget")
                        .WithMany("Realisations")
                        .HasForeignKey("RubriqueBudgetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RubriqueBudget");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.SousCategoryBudget", b =>
                {
                    b.HasOne("RotaryClubManager.Domain.Entities.CategoryBudget", "CategoryBudget")
                        .WithMany("SousCategories")
                        .HasForeignKey("CategoryBudgetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RotaryClubManager.Domain.Entities.Club", "Club")
                        .WithMany()
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryBudget");

                    b.Navigation("Club");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Identity.ApplicationUser", b =>
                {
                    b.HasOne("RotaryClubManager.Domain.Entities.Club", null)
                        .WithMany("Membres")
                        .HasForeignKey("ClubId");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Identity.UserClub", b =>
                {
                    b.HasOne("RotaryClubManager.Domain.Entities.Club", "Club")
                        .WithMany()
                        .HasForeignKey("ClubId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RotaryClubManager.Domain.Identity.ApplicationUser", "User")
                        .WithMany("UserClubs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.Categorie", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.CategoryBudget", b =>
                {
                    b.Navigation("SousCategories");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.Club", b =>
                {
                    b.Navigation("Mandats");

                    b.Navigation("Membres");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.Evenement", b =>
                {
                    b.Navigation("Budgets");

                    b.Navigation("Documents");

                    b.Navigation("Images");

                    b.Navigation("Recettes");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.Gala", b =>
                {
                    b.Navigation("Invites");

                    b.Navigation("Tables");

                    b.Navigation("Tickets");

                    b.Navigation("Tombolas");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.GalaInvites", b =>
                {
                    b.Navigation("TableAffectations");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.GalaTable", b =>
                {
                    b.Navigation("TableAffectations");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.Mandat", b =>
                {
                    b.Navigation("MembresCommission");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.Reunion", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Invites");

                    b.Navigation("ListesPresence");

                    b.Navigation("OrdresDuJour");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.RubriqueBudget", b =>
                {
                    b.Navigation("Realisations");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.SousCategoryBudget", b =>
                {
                    b.Navigation("Rubriques");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.TypeBudget", b =>
                {
                    b.Navigation("CategoriesBudget");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.TypeDocument", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Entities.TypeReunion", b =>
                {
                    b.Navigation("Reunions");
                });

            modelBuilder.Entity("RotaryClubManager.Domain.Identity.ApplicationUser", b =>
                {
                    b.Navigation("UserClubs");
                });
#pragma warning restore 612, 618
        }
    }
}
