# Render.com deployment configuration for RotaryClubManager.API
# Documentation: https://render.com/docs/blueprint-spec

services:
  # PostgreSQL Database
  - type: pserv
    name: rotarymanager-db
    env: docker
    plan: free  # Free tier: 1GB storage, 1 month retention
    databaseName: rotarymanager
    user: rotarymanager
    # Note: Password will be auto-generated by Render

  # ASP.NET Core Web Service
  - type: web
    name: rotarymanager-api
    env: docker
    plan: free  # Free tier: 512MB RAM, sleeps after 15min inactivity
    buildCommand: |
      # Install .NET 8 SDK
      curl -sSL https://dot.net/v1/dotnet-install.sh | bash /dev/stdin --channel 8.0
      export PATH="$PATH:$HOME/.dotnet"
      
      # Restore dependencies
      dotnet restore RotaryClubManager.sln
      
      # Build the application
      dotnet build RotaryClubManager.sln --configuration Release --no-restore
      
      # Publish the API project
      dotnet publish RotaryClubManager.API/RotaryClubManager.API.csproj \
        --configuration Release \
        --output ./publish \
        --no-build \
        --verbosity minimal
    
    startCommand: |
      # Set .NET runtime path
      export PATH="$PATH:$HOME/.dotnet"
      
      # Run database migrations (optional - uncomment if needed)
      # dotnet ./publish/RotaryClubManager.API.dll --migrate
      
      # Start the application
      dotnet ./publish/RotaryClubManager.API.dll
    
    # Health check endpoint
    healthCheckPath: /health
    
    # Environment variables
    envVars:
      # ===========================================
      # ASPNET CORE CONFIGURATION
      # ===========================================
      - key: ASPNETCORE_ENVIRONMENT
        value: Production
      
      - key: ASPNETCORE_URLS
        value: http://0.0.0.0:$PORT
      
      # ===========================================
      # DATABASE CONFIGURATION
      # ===========================================
      # Connection string will use the PostgreSQL service created above
      - key: ConnectionStrings__DefaultConnection
        fromDatabase:
          name: rotarymanager-db
          property: connectionString
      
      # ===========================================
      # JWT CONFIGURATION
      # ===========================================
      # ⚠️ IMPORTANT: Change this secret key in production!
      # Generate a secure key: openssl rand -base64 32
      - key: JwtSettings__Secret
        generateValue: true  # Render will generate a secure random value
      
      - key: JwtSettings__Issuer
        value: RotaryClubManager
      
      - key: JwtSettings__Audience
        value: RotaryClubManagerClient
      
      - key: JwtSettings__AccessTokenExpiration
        value: "60"  # minutes
      
      - key: JwtSettings__RefreshTokenExpiration
        value: "1440"  # minutes (24 hours)
      
      # ===========================================
      # EMAIL SMTP CONFIGURATION
      # ===========================================
      # 📧 Configure your SMTP settings here
      - key: Email__SmtpHost
        value: smtp.gmail.com  # Change to your SMTP provider
      
      - key: Email__SmtpPort
        value: "587"
      
      - key: Email__SmtpUser
        value: your-email@gmail.com  # ⚠️ CHANGE THIS
      
      - key: Email__SmtpPassword
        sync: false  # This will be a secret environment variable
        # Set this in Render dashboard: Settings > Environment > Add Environment Variable
        # Value: your-email-app-password
      
      - key: Email__FromEmail
        value: your-email@gmail.com  # ⚠️ CHANGE THIS
      
      - key: Email__FromName
        value: Rotary Club Manager
      
      - key: Email__EnableSsl
        value: "true"
      
      - key: Email__UseSecureConnection
        value: "true"
      
      # ===========================================
      # META WHATSAPP API CONFIGURATION
      # ===========================================
      # 📱 Configure your Meta WhatsApp Business API
      - key: Meta__AppId
        sync: false  # Secret - set in Render dashboard
        # Value: your-meta-app-id
      
      - key: Meta__PhoneNumberId
        sync: false  # Secret - set in Render dashboard
        # Value: your-phone-number-id
      
      - key: Meta__WhatsAppBusinessAccountId
        sync: false  # Secret - set in Render dashboard
        # Value: your-whatsapp-business-account-id
      
      - key: Meta__AccessToken
        sync: false  # Secret - set in Render dashboard
        # Value: your-meta-access-token
      
      - key: Meta__TestNumber
        value: "+1234567890"  # ⚠️ CHANGE THIS
      
      - key: Meta__WebhookVerifyToken
        generateValue: true  # Render will generate a secure random value
      
      - key: Meta__ApiVersion
        value: v18.0
      
      - key: Meta__WebhookUrl
        value: https://rotarymanager-api.onrender.com/api/metawhatsapp/webhook
        # ⚠️ This will be your actual Render app URL
      
      # ===========================================
      # TWILIO CONFIGURATION (Optional)
      # ===========================================
      - key: Twilio__AccountSid
        sync: false  # Secret - set in Render dashboard if using Twilio
        # Value: your-twilio-account-sid
      
      - key: Twilio__AuthToken
        sync: false  # Secret - set in Render dashboard if using Twilio
        # Value: your-twilio-auth-token
      
      - key: Twilio__FromPhoneNumber
        value: "+1234567890"  # ⚠️ CHANGE THIS if using Twilio
      
      # ===========================================
      # APPLICATION SETTINGS
      # ===========================================
      - key: DefaultClubId
        value: "00000000-0000-0000-0000-000000000000"  # ⚠️ CHANGE THIS
      
      - key: ApiSettings__BaseUrl
        value: https://rotarymanager-api.onrender.com
        # ⚠️ This will be your actual Render app URL
      
      # ===========================================
      # CORS CONFIGURATION
      # ===========================================
      - key: CORS__AllowedOrigins__0
        value: https://your-frontend-domain.com  # ⚠️ CHANGE THIS
      
      - key: CORS__AllowedOrigins__1
        value: http://localhost:3000  # For local development
      
      # ===========================================
      # LOGGING CONFIGURATION
      # ===========================================
      - key: Logging__LogLevel__Default
        value: Information
      
      - key: Logging__LogLevel__Microsoft.AspNetCore
        value: Warning
      
      - key: Logging__LogLevel__Microsoft.EntityFrameworkCore.Database.Command
        value: Warning  # Reduce DB query logging in production

# ===========================================
# DEPLOYMENT INSTRUCTIONS
# ===========================================
# 
# 1. SETUP RENDER ACCOUNT:
#    - Sign up at https://render.com
#    - Connect your GitHub account
#    - Fork/clone this repository
# 
# 2. DEPLOY FROM DASHBOARD:
#    - Go to Render Dashboard
#    - Click "New" > "Blueprint"
#    - Connect your GitHub repository
#    - Select this render.yaml file
#    - Click "Apply"
# 
# 3. CONFIGURE SECRETS:
#    After deployment, go to your service settings and add these secret environment variables:
#    - Email__SmtpPassword: Your email app password
#    - Meta__AppId: Your Meta app ID
#    - Meta__PhoneNumberId: Your WhatsApp phone number ID
#    - Meta__WhatsAppBusinessAccountId: Your WhatsApp business account ID
#    - Meta__AccessToken: Your Meta access token
#    - Twilio__AccountSid: Your Twilio account SID (if using)
#    - Twilio__AuthToken: Your Twilio auth token (if using)
# 
# 4. UPDATE CONFIGURATION:
#    - Replace all "⚠️ CHANGE THIS" values with your actual values
#    - Update the webhook URL with your actual Render app URL
#    - Configure your frontend domain in CORS settings
# 
# 5. DATABASE MIGRATIONS:
#    - Uncomment the migration command in startCommand if needed
#    - Or run migrations manually via Render shell
# 
# 6. CUSTOM DOMAIN (Optional):
#    - Go to Settings > Custom Domains
#    - Add your domain and configure DNS
# 
# 7. MONITORING:
#    - Check logs in Render dashboard
#    - Monitor health check at /health endpoint
#    - Set up alerts for service downtime
# 
# ===========================================
